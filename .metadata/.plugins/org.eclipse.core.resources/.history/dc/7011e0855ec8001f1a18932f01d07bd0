package com.lib.book.shop.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.lib.book.shop.dao.BookDAO;
import com.lib.book.shop.to.BookTO;
import com.lib.book.shop.to.UserTO;
import com.lib.book.shop.util.JDBCUtil;

public class JDBCBookDAO implements BookDAO{

	Logger log=Logger.getLogger(this.getClass());

	@Override
	public boolean addBook(BookTO bto) {
		boolean added = false;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			con = JDBCUtil.getConnection();
			ps = con.prepareStatement(
					"insert into book_table(bookName,author,cost,publication,edition) values(?,?,?,?,?)");
			ps.setString(1, bto.getBookName());
			ps.setString(2, bto.getAuthor());
			ps.setFloat(3, bto.getCost());
			ps.setString(4, bto.getPublication());
			ps.setString(5, bto.getEdition());
			int x = ps.executeUpdate();
			
			if (x>0) {
				added=true;
			}
		} catch (Exception e) {
			added=false;			
			log.error("Exception in addBook :\n", e);
		} finally {
			JDBCUtil.close(rs, ps, con);
		}
		return added;
	}

	@Override
	public boolean alreadyExist(BookTO bto) {
		boolean exist = false;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			con = JDBCUtil.getConnection();
			ps = con.prepareStatement(
					"select * from book_table where bookName=? and author=? and cost=? and publication=? and edition=?)");
			ps.setString(1, bto.getBookName());
			ps.setString(2, bto.getAuthor());
			ps.setFloat(3, bto.getCost());
			ps.setString(4, bto.getPublication());
			ps.setString(5, bto.getEdition());
			rs= ps.executeQuery();
			
			if (rs.next()) {
				exist=true;
			}
		} catch (Exception e) {
			exist=false;			
			log.error("Exception in alreadyExist :\n", e);
		} finally {
			JDBCUtil.close(rs, ps, con);
		}
		return exist;
	}

	@Override
	public List searchBook(BookTO bto, int start, int numberOfBook) {
		List bookList = null;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;

		try {
			con = JDBCUtil.getConnection();
			ps = con.prepareStatement(prepareQuery(bto),ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
			int i=1;
			if(bto.getBookName()!=null && bto.getBookName().length()!=0)
			ps.setString(i++,"%"+bto.getBookName().trim()+"%");
			if(bto.getCost()!=0)
			ps.setFloat(i++,bto.getCost());
			if(bto.getAuthor()!=null && bto.getAuthor().length()!=0)
			ps.setString(i++,"%"+bto.getAuthor().trim()+"%");
			if(bto.getPublication()!=null && bto.getPublication().length()!=0)
			ps.setString(i++,"%"+bto.getPublication().trim()+"%");
			if(bto.getEdition()!=null && bto.getEdition().length()!=0)
			ps.setString(i++,bto.getEdition().trim());
			rs=ps.executeQuery();
			rs.absolute(start+1);
			int x=1;
			bookList=new ArrayList();
			
			do {
			BookTO bookTO=new BookTO(rs.getString(2), rs.getString(3), rs.getString(5), rs.getString(6), rs.getString(6));
			bookTO.setBookId(rs.getInt(1));
			bookList.add(bookTO);
			}while(rs.next() && x<=numberOfBook);
		}catch (Exception e) {
			bookList=null;
			log.error(""Exception in searchBook :\n",e);
		}
				finally {
			JDBCUtil.close(rs, ps, con);
		}
		return added;
	}

	@Override
	public int getTotalNumberOfBook(BookTO bto) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean deleteBook(int bookId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public BookTO getBookById(String bid) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private String prepareQuery(BookTO bto) {
		String qry="select * from book_table";
		boolean whereAdded=false;
		if(bto.getBookName()!=null && bto.getBookName().length()!=0) {
			qry+="where bookName like ?";
			whereAdded=true;
		}
		if(bto.getCost()!=0) {
			if(whereAdded) {
				qry+=" and cost=?";
			}else {
				qry+=" where cost=?";
				whereAdded=true;
			}
		}
		if(bto.getAuthor()!=null && bto.getAuthor().length()!=0) {
			if(whereAdded) {
				qry+=" and author like ?";
			}else {
				qry+=" where author like ?";
				whereAdded=true;
			}
		}
		if(bto.getPublication()!=null && bto.getPublication().length()!=0) {
			if(whereAdded) {
				qry+=" and publication like ?";
			}else {
				qry+=" where publication like ?";
				whereAdded=true;
			}
		}
		if(bto.getEdition()!=null && bto.getEdition().length()!=0) {
			if(whereAdded) {
				qry+=" and edition=?";
			}else {
				qry+=" where edition=?";
				whereAdded=true;
			}
		}
		return qry;
	}
	
}
